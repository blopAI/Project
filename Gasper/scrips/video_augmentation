import cv2
import numpy as np
from skimage.util import random_noise

# parametri
NOISE = True
NOISE_TYPE = 'gauss'
ROTATE = True
SCALE = 1.0
PLAYBACK_SPEED = 1.0


def rotate_180(img: np.ndarray):
    img_out = cv2.rotate(img, cv2.ROTATE_180)
    return img_out


def add_noise_gauss(img: np.ndarray):
    noise_img = random_noise(img, mode='gaussian', var=0.05**2)
    noise_img = (noise_img*255).astype(np.uint8)
    return noise_img


def noisy(noise_typ,image):
    if noise_typ == "gauss":
        row,col,ch= image.shape
        mean = 0
        gauss = np.random.normal(mean,1,(row,col,ch))
        gauss = gauss.reshape(row,col,ch)
        noisy = image + gauss
        return noisy
    
    elif noise_typ == "s&p":
        row,col,ch = image.shape
        s_vs_p = 0.5
        amount = 0.004
        out = image
        # Salt mode
        num_salt = np.ceil(amount * image.size * s_vs_p)
        coords = [np.random.randint(0, i - 1, int(num_salt))for i in image.shape]
        out[coords] = 1
        # Pepper mode
        num_pepper = np.ceil(amount* image.size * (1. - s_vs_p))
        coords = [np.random.randint(0, i - 1, int(num_pepper))
                for i in image.shape]
        out[coords] = 0
        return out
    
    elif noise_typ == "poisson":
        vals = len(np.unique(image))
        vals = 2 ** np.ceil(np.log2(vals))
        noisy = np.random.poisson(image * vals) / float(vals)
        return noisy
    
    elif noise_typ =="speckle":
        row,col,ch = image.shape
        gauss = np.random.randn(row,col,ch)
        gauss = gauss.reshape(row,col,ch)        
        noisy = image + image * gauss
        return noisy

    else:
        return image


def play_vid(file: str):
    cap = cv2.VideoCapture(file)

    if (cap.isOpened()== False): 
        print("Error opening video stream or file")
    
    while(cap.isOpened()):
        ret, frame = cap.read()

        if NOISE:
            #frame_np = np.zeros(frame.shape)
            #frame_np[:,:,0] = frame[:,:,2]
            #frame_np[:,:,1] = frame[:,:,1]
            #frame_np[:,:,2] = frame[:,:,0]
            #frame_np = add_noise_gauss(frame_np)
            #frame[:,:,0] = frame_np[:,:,2]
            #frame[:,:,1] = frame_np[:,:,1]
            #frame[:,:,2] = frame_np[:,:,0]
            frame = add_noise_gauss(frame)
        if ROTATE:
            frame = rotate_180(frame)

        if ret == True:
            cv2.imshow('Frame',frame)
            cv2.waitKey(int(1000/cap.get(cv2.CAP_PROP_FPS) / PLAYBACK_SPEED))
    
            #if cv2.waitKey(int(1000/cap.get(cv2.CAP_PROP_FPS) / PLAYBACK_SPEED)) and 0xFF == ord('q'):
            #    break

        else: 
            break
    
    cap.release()
    
    cv2.destroyAllWindows()


def write_vid(file: str):
    cap = cv2.VideoCapture(file)
  
    if (cap.isOpened()== False):
        print("Error opening video file")
  
    while(cap.isOpened()):
        ret, frame = cap.read()
        if ret == True:
            cv2.imshow('Frame', frame)
            if cv2.waitKey(int(1000/cap.get(cv2.CAP_PROP_FPS))) & 0xFF == ord('q'):
                break
        else:
            break

    cap.release()
  
    cv2.destroyAllWindows()


if __name__ == '__main__':
    play_vid('vid_record_2023_5_6_3.mp4')
